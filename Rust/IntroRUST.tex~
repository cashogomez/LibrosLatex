%\documentclass[options]{class}
\documentclass[12pt, twoside]{report}

%Para listado de programas
\usepackage{listings}
\usepackage{color}

\definecolor{mygreen}{rgb}{0,0.5,0}
\definecolor{mygray}{rgb}{0.7,0.7,0.7}
\definecolor{mymauve}{rgb}{0.58,0,0.82}

\lstset{ %
	 backgroundcolor=\color{mygray},   % choose the background color; you must add \usepackage{color} or \usepackage{xcolor}
	 basicstyle=\footnotesize\ttfamily,        % the size of the fonts that are used for the code
	 breaklines=true,            % Zeilen werden Umgebrochen
	 keywordstyle=\color{red},
	 commentstyle=\itshape\color{mygreen},    % comment style
	 numbers=left,                    % where to put the line-numbers; possible values are (none, left, right)
	 numbersep=5pt                   % how far the line-numbers are from the code
}

%Paquete de Idioma
\usepackage[spanish]{babel}

%Codificación Alfabeto
\usepackage[utf8]{inputenc}

%Codificación de Fuente
\usepackage[T1]{fontenc}

%Índice
\usepackage{makeidx}

%Gráficos
\usepackage{graphicx}
\usepackage{float} 
%\usepackage{xcolor} 

%Matemática
\usepackage{amsmath}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amstext} 

%Estilo de Página Numeración superior
%\pagestyle{headings}

%un estilo propio
\usepackage{fancyhdr}
\setlength{\headheight}{15pt}

\pagestyle{fancy}
\renewcommand{\chaptermark}[1]{ \markboth{\chaptername\ \thechapter: #1}{} }
\renewcommand{\sectionmark}[1]{ \markright{ Sección \thesection. #1}{} }

\fancyhf{}
\fancyhead[LE,RO]{\thepage}
\fancyhead[RE]{\textit{ \nouppercase{\leftmark}} }
\fancyhead[LO]{\textit{ \nouppercase{\rightmark}} }
\fancyfoot[CE]{\textit{\textcopyright 2015 Laboratorio de Sistemas Embebidos\\
	                    UPAEP} }
\fancyfoot[CO]{\textit{LSE004-2015 \\
		Elaboró: Dr. Casimiro Gómez González} }	            
\fancypagestyle{plain}{ %
	\fancyhf{} % remove everything
	\renewcommand{\headrulewidth}{0pt} % remove lines as well
	\renewcommand{\footrulewidth}{0pt}
}

%Hiperlinks \href{url}{text}
\usepackage[pdftex]{hyperref}

\usepackage{cite} % para contraer referencias

%Titulo
\title{LSE004-2015: Programando en el lenguaje RUST}
\author{Dr. Casimiro Gómez González\\
	Facultad de Electrónica, UPAEP\\
               correo: casimiro.gomez@upaep.mx\\
               Tel: 222 229 9428}
\date{Primavera 2015}

\begin{document}

\maketitle

\chapter*{Prólogo}

El presente texto es una introducción a la programación en RUST, incluye las herramientas necesarias para el desarrollo de proyectos de nivel intermedio en este excitante lenguaje y sus aplicaciones en el desarrollo de sistemas embebidos.

\begin{flushright}
	
	El autor\\
	Casimiro Gómez González\\
	Doctor en Ingeniería Mecatrónica \\
	correo: casimiro.gomez@upaep.mx
\end{flushright}

\tableofcontents


\chapter{Características Principales de RUST}

RUST es un lenguaje de programación de sistemas enfocado en tres objetivos: Seguridad, velocidad y concurrencia. Se logran estos tres objetivos sin tener un colector de basura, provocando esto que sea un lenguaje útil  para aplicaciones donde otros lenguajes no lo son: Ser embebidos en otros lenguajes, programas con datos específicos de tiempo y espacio, escritura de código de bajo nivel, tales como drivers de dispositivos y sistemas operativos. Mejora de los lenguajes actuales dirigidas a este espacio por tener una serie de controles de seguridad en tiempo de compilación que no producen sobrecarga de tiempo de ejecución , mientras que la eliminación de todas las carreras de datos. Rust también tiene como objetivo lograr `` abstracciones  de costo cero '' a pesar de que algunas de estas abstracciones sienten como los de un lenguaje de alto nivel . Incluso entonces , Rust todavía permite un control preciso como un lenguaje de bajo nivel lo haría.

\section{Una corta introducción a RUST}

EL principal concepto que hace a Rust único es llamado "propiedad". Considere el siguiente ejemplo:

\begin{lstlisting}[language=erlang]
fn main() {
	let mut x = vec!["Hola", "mundo"];
}
\end{lstlisting}

Este programa realiza un enlace de variable llamado \textbf{x}. El valor de este enlace  es un\textit{ Vec<T>}, un ``vector'' a través de una macro definida en la librería estándar. Esta macro es llamada \textbf{vec}, y se invoca a los macros con un \textbf{!}. Esto sigue el principio general de Rust: \textbf{Haz las cosas explícitamente}. Las macros pueden hacer cosas significativamente mas complicadas que las funciones, es por ello que son visualmente distintas. El símbolo \textbf{!} tambien ayuda con el parsing, haciendo la herramienta de macros fácil de escribir, lo cual es muy importante.

Se utiliza \textbf{mut} para hacer \textbf{x} mutable: los enlaces son inmutables por defecto en Rust. 

También vale la pena señalar que no necesitábamos una anotación de tipo aquí: mientras Rust se escribe con tipado estático, no lo necesitamos para anotar explícitamente el tipo . Rust tiene inferencia de tipos para equilibrar el poder de tipos estáticos con el nivel de detalle de la anotación de tipos .

Rust prefiere asignación de pila que asignación de memoria dinámica: x es colocada directamente en la pila. Sin embargo, el tipo Vec<T> coloca espacios para elementos del vector en la memoria dinámica.  Como lenguaje de programación de sistemas, RUST proporciona la habilidad de controlar como las memoria es colocada.

Como mencionamos anteriormente, la ``propiedad'' es el concepto principal en Rust. En el lenguaje Rust, x se dice que es ``Dueño'' del vector. Esto significa que cuando x se elimina, la memoria del vector se descoloca. 
Esto es realizado determinísticamente por el compilador de Rust, mas que a través de un mecanismo tal como el colector de basura. En otras palabras, en RUST, no se llama a la función como \textbf{malloc} y \textbf{free} por ti mismo: El compilador estáticamente determina cuando se necesita colocar o liberar memoria, e introduce estas llamadas por el mismo. Equivocarse es humano, pero el compilador nunca olvida.

Si agregamos otra linea a nuestro ejemplo:

\begin{lstlisting}[language=erlang]
fn main() {
let mut x = vec!["Hello", "world"];

let y = &x[0];
}
\end{lstlisting}

En el programa anterior se introdujo otra ligadura, \textbf{y}. En este caso, \textbf{y} es una ``referencia'' a el primer elemento de el vector. La referencias en Rust son similares a los apuntadores en otros lenguajes, pero con revisiones de seguridad adicionales en tiempo de compilación. Las referencias interactuan con las el sistema de propiedades ``prestando'' a lo que apunta, mas que adueñandose de él. La diferencia es, cuando la referencia se elimina, no será liberada de la memoria. Si así fuera, sería liberada dos veces lo cual es malo.

Ahora adicionemos una tercera línea.

\begin{lstlisting}[language=erlang]
fn main() {
	let mut x = vec!["Hello", "world"];

	let y = &x[0];

	x.push("foo");
}
\end{lstlisting}

\textbf{push} es un método en los vectores que adiciona otro elemento al final del vector. Cuando se trata de compilar este programa, se general el siguiente error:

\begin{lstlisting}[language=erlang]
error: cannot borrow `x` as mutable because it is also borrowed as immutable
x.push(4);
^
note: previous borrow of `x` occurs here; the immutable borrow prevents
subsequent moves or mutable borrows of `x` until the borrow ends
let y = &x[0];
^
note: previous borrow ends here
fn main() {

}
^
\end{lstlisting}

El compilador Rust da información bastante detallada de los errores algunas veces, esta es una de esas veces. Como se señala en el error, mientras hacemos nuestra ligadura mutable no se puede ejecutar  \textbf{push}. Esto es debido a que aún tenemos una referencia a un elemento del vector, y. Mutar algo mientras otra referencia existe es peligroso, porque se podría invalidad la referencia. En este caso específico, cuando creamos un vector, solamente tendremos espacio de memoria para tres elementos. Adicionar un cuarto significa colocar un espacio de memoria para esos elementos nuevos, copiando valores viejos y actualizando el apuntador interno a esa memoria. Todo esto suena bien. El problema es que y no se puede actualizar, por lo que tendremos un apuntador colgante. Esto es malo. Cualquier uso de y generará un error en este caso, así que el compilador captura el error para nosotros.

Asi que ¿Como resolvemos este problema? Se puede utilizando dos técnicas. La primera es haciendo una copia mas que una referencia:


\begin{lstlisting}[language=erlang]
fn main() {
	let mut x = vec!["Hello", "world"];
	
	let y = x[0].clone();
	
	x.push("foo");
}
\end{lstlisting}

Rust tiene una semantica para mover datos, de tal forma que si queremos hacer una copia de alguna dato, llamamos al método \textbf{clone()}. En este ejemplo, \textbf{y} no es más una referencia al vector guardado en \textbf{x\textbf{}}, pero copia su primer elemento ``hola''. Ahora no tenemos referencia, y el método \textbf{push()} trabajará bien.

Si realmente se requiere de utilizar una referencia, se necesita otra opción, esta es: asegurarse que nuestra referencia esta fuera del ambiente antes de que tratemos de hacer la mutación. Esto quería de la siguiente forma:

\begin{lstlisting}[language=erlang]
fn main() {
	let mut x = vec!["Hello", "world"];
	
	{
		let y = &x[0];
	}
	
	x.push("foo");
}
\end{lstlisting}

En este programa se ha creado un ambiente interno utilizando el conjunto de llaves adicionales. \textbf{y} se saca del ambiente antes de llamar al método \textbf{push()}, de tal forma que todo funciona adecuadamente.

El concepto de ``propiedad '' no es bueno para prevenir apuntadores colgados, pero un conjunto de problemas relacionados, como iteraciones inválidas , concurrencia y otros si se previenen.

\section{Instalando RUST}

El primer paso para usar Rust es instalarlo. Hay distintas formas de instalar Rust, pero la forma más fácil es usar el script \textbf{rustup}. Se necesita ejecutar el siguiente comando:

\begin{lstlisting}[language=bash]
$ curl -sf -L https://static.rust-lang.org/rustup.sh | sudo sh
\end{lstlisting}

También es posible instalarlo en dos pasos:

\begin{lstlisting}[language=bash]
$ curl -f -L https://static.rust-lang.org/rustup.sh -O
$ sudo sh rustup.sh
\end{lstlisting}

\section{Desinstalando}

Si se desea desinstalar Rust se debe ejecutar el siguiente comando:

\begin{lstlisting}[language=bash]
$ sudo /usr/local/lib/rustlib/uninstall.sh
\end{lstlisting}


\section{Programa ``Hola, Mundo''}

Antes de escribir nuestro tradicional programa ``Hola, Mundo'', vamos a crear nuestro subdirectorio de trabajo

\begin{lstlisting}[language=bash]
$ mkdir ~/projects
$ cd ~/projects
$ mkdir hello_world
$ cd hello_world
\end{lstlisting}

Ahora haremos un nuevo archivo fuente. Y llamaremos al archivo \textbf{main.rs}. Los archivos en Rust siempre terminan con la extensión \textbf{.rs}. Si utilizas mas de una palabra en el nombre de tu archivo, se recomienda usar un guión inferior \textbf{Hola\_Mundo.rs} mas que \textbf{HolaMundo.rs}.

Ahora, una vez el archivo este abierto, escribir el siguiente código dentro:

\begin{lstlisting}[language=erlang]
fn main() {
	println("Hola, Mundo");
}
\end{lstlisting}

Grabar el archivo, y luego escribir los siguientes comandos en la terminal:
\begin{lstlisting}[language=bash]
$ rustc main.rs
$ ./main 
Hello, world!
\end{lstlisting}

¡Éxito! Ahora analizaremos el programa en detalle

\begin{lstlisting}[language=erlang]
fn main() {

}
\end{lstlisting}

Estas lineas definen una función en Rust. La función \textbf{main} es especial: Es el principio de todo programa Rust. La primera linea dice ``Estoy declarando una función llamada \textbf{main} la cual no necesita argumentos y no regresa nada". Si necesitara algún argumento estos irían dentro de los paréntesis, y debido a que no estamos regresando nada se puede omitir la palabra clave \textbf{return} completamente.


\bibliographystyle{acm}
\bibliography{../bibliografia}
\end{document}